const express = require('express');
const http = require('http');
const { Server } = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*", 
    methods: ["GET", "POST"]
  }
});

const PORT = 3000;


const themes = [
  "Quand je me sens heureux, je vais dans un lieu‚Ä¶",
  "Quand je suis triste, je pense √†‚Ä¶",
  "Quand j‚Äôai peur, je cherche‚Ä¶",
  "Quand je suis en col√®re, je fais‚Ä¶",
  "Quand je me sens calme, j‚Äôaime‚Ä¶",
  "Quand je suis excit√©, je veux‚Ä¶",
  "Quand je me sens seul, je r√™ve de‚Ä¶",
  "Quand je suis surpris, je ressens‚Ä¶",
  "Quand je suis fatigu√©, je me r√©fugie dans‚Ä¶",
  "Quand je suis motiv√©, je vais vers‚Ä¶",
    "Quand je me sens incompris, j‚Äôai besoin de‚Ä¶",
    "Quand je suis plein d‚Äô√©nergie, je cours vers‚Ä¶",
    "Quand je suis stress√©, j‚Äôimagine‚Ä¶",
    "Quand je me sens libre, je‚Ä¶",
    "Quand je suis jaloux, j‚Äôaimerais‚Ä¶",
    "Quand je ressens de la culpabilit√©, je pense √†‚Ä¶",
    "Quand je suis √©mu, je r√©agis en‚Ä¶",
    "Quand je me sens invisible, je voudrais‚Ä¶",
    "Quand je suis nostalgique, je retourne √†‚Ä¶",
    "Quand je ressens de la gratitude, je pense √†‚Ä¶",
    "Quand je suis fier, j‚Äôai envie de‚Ä¶",
    "Quand je me sens cr√©atif, je cr√©e‚Ä¶",
    "Quand je suis d√©courag√©, je me rappelle‚Ä¶",
    "Quand je me sens soutenu, je peux‚Ä¶",
    "Quand je suis perdu, je cherche‚Ä¶",
    "Quand je suis anxieux, j‚Äôaimerais‚Ä¶",
    "Quand je me sens important, je‚Ä¶",
    "Quand je suis d√©√ßu, je me tourne vers‚Ä¶",
    "Quand je ressens de la tendresse, je pense √†‚Ä¶",
    "Quand je me sens entendu, je‚Ä¶"
];

let rooms = {}; 

function generateRoomCode() {
  return Math.random().toString(36).substring(2, 7).toUpperCase();
}

function assignUniqueNumber(usedNumbers) {
  const available = [];
  for (let i = 1; i <= 10; i++) {
    if (!usedNumbers.has(i)) available.push(i);
  }
  if (available.length === 0) return null;
  const index = Math.floor(Math.random() * available.length);
  return available[index];
}


function getRandomTheme(currentTheme) {
  let newTheme;
  do {
    newTheme = themes[Math.floor(Math.random() * themes.length)];
  } while (newThem);
  return newTheme;
}

// Connexion d'un joueur
io.on('connection', (socket) => {
  console.log(`üîå Nouvelle connexion : ${socket.id}`);

  // Cr√©ation de salle
  socket.on('createRoom', (nickname, callback) => {
    const roomCode = generateRoomCode();
    const number = Math.floor(Math.random() * 10) + 1;
    const theme = themes[Math.floor(Math.random() * themes.length)];

    rooms[roomCode] = {
      players: {},
      usedNumbers: new Set(),
      theme,
      status: "waiting"
    };

    rooms[roomCode].players[socket.id] = {
      nickname,
      number,
      answer: null,
    };
    rooms[roomCode].usedNumbers.add(number);
    socket.join(roomCode);

    callback({ roomCode, number, theme });
    console.log(`üè† Salle cr√©√©e : ${roomCode} par ${nickname} avec th√®me : ${theme}`);
  });

  // Rejoindre une salle
  socket.on('joinRoom', ({ roomCode, nickname }, callback) => {
    const room = rooms[roomCode];
    if (!room) return callback({ error: "Salle introuvable" });

    const number = assignUniqueNumber(room.usedNumbers);
    if (!number) return callback({ error: "Salle pleine" });

    room.players[socket.id] = { nickname, number, answer: null };
    room.usedNumbers.add(number);
    socket.join(roomCode);

    callback({ roomCode, number, theme: room.theme });
    io.to(roomCode).emit('updatePlayers', Object.values(room.players).map(p => p.nickname));
    console.log(`üë§ ${nickname} a rejoint la salle ${roomCode}`);
  });

socket.on('changeTheme', (roomCode) => {
  const room = rooms[roomCode];
  if (!room) return;

  console.log(`üîÑ [SERVER] Changement de th√®me demand√© dans la salle ${roomCode}`);

  const newTheme = getRandomTheme(room.theme);
  room.theme = newTheme;

  // R√©initialiser les num√©ros utilis√©s
  room.usedNumbers = new Set();

  const playerIds = Object.keys(room.players);

  playerIds.forEach(id => {
    const number = assignUniqueNumber(room.usedNumbers);
    room.players[id].number = number;
    room.usedNumbers.add(number);
    console.log(`üé≤ [SERVER] Nouveau chiffre pour ${room.players[id].nickname} : ${number}`);
  });

  // Envoyer le nouveau th√®me
  io.to(roomCode).emit('roundStarted', { theme: newTheme });

  // Envoyer les nouveaux num√©ros aux clients
  playerIds.forEach(id => {
    io.to(id).emit('updateNumber', room.players[id].number);
  });
});




  socket.on('startRound', ({ roomCode, theme }) => {
    const room = rooms[roomCode];
    if (!room) return;
    room.theme = theme;
    room.status = "playing";
    for (const id in room.players) {
      room.players[id].answer = null;
    }
    io.to(roomCode).emit('roundStarted', { theme });
  });

  // R√©ponse d'un joueur
  socket.on('submitAnswer', ({ roomCode, answer }) => {
    const room = rooms[roomCode];
    if (!room || !room.players[socket.id]) return;

    room.players[socket.id].answer = answer;

    const allAnswered = Object.values(room.players).every(p => p.answer !== null);
    if (allAnswered) {
      const answers = Object.entries(room.players).map(([id, p]) => ({
        nickname: p.nickname,
        answer: p.answer,
        socketId: id
      }));
      io.to(roomCode).emit('allAnswers', answers);
    }
  });

  socket.on('disconnect', () => {
    for (const roomCode in rooms) {
      const room = rooms[roomCode];
      if (room.players[socket.id]) {
        console.log(`‚ùå ${room.players[socket.id].nickname} a quitt√© la salle ${roomCode}`);
        room.usedNumbers.delete(room.players[socket.id].number);
        delete room.players[socket.id];
        io.to(roomCode).emit('updatePlayers', Object.values(room.players).map(p => p.nickname));

        // Supprimer la salle si vide
        if (Object.keys(room.players).length === 0) {
          delete rooms[roomCode];
          console.log(`üßπ Salle ${roomCode} supprim√©e`);
        }
      }
    }
  });
});

const os = require('os');

function getLocalIp() {
  const nets = os.networkInterfaces();
  for (const name of Object.keys(nets)) {
    for (const net of nets[name]) {
      // ignore ipv6 and internal (loopback) addresses
      if (net.family === 'IPv4' && !net.internal) {
        return net.address;
      }
    }
  }
  return 'localhost';
}

server.listen(PORT, '0.0.0.0', () => {
  const localIp = getLocalIp();
  console.log(`üéÆ Serveur d√©marr√© sur :`);
  console.log(`  - Localhost: http://localhost:${PORT}`);
  console.log(`  - R√©seau local: http://${localIp}:${PORT}`);
});

